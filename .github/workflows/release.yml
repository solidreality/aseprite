name: Build and Upload
on: [workflow_dispatch]
env:
  APP_VERSION: "1.3.13-solidreality"
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            osname: windows
            skia_file: Skia-Windows-Release-x64.zip
            arch: x64
          - os: macos-latest
            osname: macos
            skia_file: Skia-macOS-Release-arm64.zip
            arch: arm64
          - os: ubuntu-latest
            osname: linux
            skia_file: Skia-Linux-Release-x64-libstdc++.zip
            arch: x64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Install Linux Dependencies
        if: matrix.osname == 'linux'
        shell: bash
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.osname == 'windows'
      - name: Install OpenSSL 3 (Windows)
        if: matrix.osname == 'windows'
        shell: powershell
        run: |
          $InstallDir = "C:\\Program Files\\OpenSSL3"
          
          # Download OpenSSL installer
          Invoke-WebRequest -Uri "https://slproweb.com/download/Win64OpenSSL-3_4_1.exe" -OutFile "openssl-installer.exe"
          
          # Silent install
          Start-Process -FilePath "openssl-installer.exe" -ArgumentList "/SILENT", "/SP-", "/SUPPRESSMSGBOXES", "/DIR=$InstallDir" -Wait
          
          # Modify system PATH to prioritize OpenSSL 3
          # This prepends to the GitHub Actions PATH
          echo "$InstallDir\bin" >> $env:GITHUB_PATH
          
          # Print current PATH for debugging
          echo "Current PATH: $env:PATH"
          
          # Directly modify existing system OpenSSL path
          $newPath = $env:PATH -replace "C:\\Program Files\\OpenSSL\\bin", "$InstallDir\bin"
          echo "PATH=$newPath" >> $env:GITHUB_ENV
          
          # Set Visual Studio Command variables
          if ($env:__VSCMD_PREINIT_PATH) {
            $newVsPath = $env:__VSCMD_PREINIT_PATH -replace "C:\\Program Files\\OpenSSL\\bin", "$InstallDir\bin"
            echo "__VSCMD_PREINIT_PATH=$newVsPath" >> $env:GITHUB_ENV
          }
      - name: Install Skia
        shell: bash
        run: |
          # Download and extract pre-built Skia
          skia_tag="m102-861e4743af"
          skia_url="https://github.com/aseprite/skia/releases/download/$skia_tag/${{ matrix.skia_file }}"
          curl -L -o "${{ matrix.skia_file }}" "$skia_url"
          unzip -d "skia" "${{ matrix.skia_file }}"
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        if: matrix.osname != 'windows'
        with:
          key: ${{ matrix.os }}
      - uses: aseprite/get-ninja@main
      - name: Generating Makefiles
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
            -DENABLE_NEWS=off \
            -DENABLE_UPDATER=off \
            -DENABLE_CCACHE=${{ matrix.enable_ccache }} \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=skia \
            -DSKIA_LIBRARY_DIR=skia/out/Release-${{ matrix.arch }}
      - name: Compiling
        shell: bash
        run: |
          cd build && ninja
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-${{ matrix.osname }}-${{ env.APP_VERSION }}
          retention-days: 7
          path: |
            ${{ matrix.osname == 'windows' && 'build/bin/aseprite.exe' || 'build/bin/aseprite' }}
            build/bin/data/
